-- automatically generated by BNF Converter
{-# LANGUAGE FlexibleContexts #-}
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.FilePath.Posix (replaceExtension)

import LexInstant
import ParInstant
import SkelInstant
import PrintInstant
import AbsInstant
import LLVM as L
import JVM as J


import ErrM

data Compiler = JVM | LLVM deriving (Eq, Ord, Show)

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: (Print Program, Show Program) => Verbosity -> ParseFun Program -> Compiler -> FilePath  -> IO ()
runFile v p c f = putStrLn f >> readFile f >>= run v p c f

run :: (Print Program, Show Program) => Verbosity -> ParseFun Program -> Compiler -> FilePath -> String -> IO ()
run v p c f s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
           Ok  tree -> do putStrLn "\nCompiling\n"
                          case c of 
                            JVM -> do
                              J.compile tree $ replaceExtension f "j"
                              putStrLn "\nTree\n"
                              showTree 2 tree
                            LLVM -> do
                              L.compile tree $ replaceExtension f "ll"
                              putStrLn "\nTree\n"
                              showTree 2 tree


showTree :: (Show Program, Print Program) => Int -> Program -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

main :: IO ()
main = do args <- getArgs
          case args of
            --[] -> hGetContents stdin >>= run 2 pProgram LLVM
            "-j":fs -> mapM_ (runFile 0 pProgram JVM) fs
            "-l":fs -> mapM_ (runFile 0 pProgram LLVM) fs





